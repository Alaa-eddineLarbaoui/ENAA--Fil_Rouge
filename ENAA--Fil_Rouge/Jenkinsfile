pipeline {
    agent any

    tools {
      maven 'mvn'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-credentiels')
        DOCKER_IMAGE = "alaaelarbaoui/docnet:latest"
        DOCKER_TAG = "${env.GIT_COMMIT.take(7)}"
        SONAR_TOKEN=credentials('sonartoken')
        SONARQUBE_SERVER='SonarServer'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                dir('ENAA--Fil_Rouge'){
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Test') {
            steps {
                dir('ENAA--Fil_Rouge'){
                bat 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('ENAA--Fil_Rouge'){
                    withSonarQubeEnv('SonarServer') {
                       bat "mvn sonar:sonar -Dsonar.token=${SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials') {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push("latest")
                    }
                }
            }
        }

        stage('Remove Old Container and Image') {
            steps {
                script {
                    bat '''
                    docker-compose down || true
                    docker rmi ${DOCKER_IMAGE}:latest || true
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    bat '''
                    docker-compose pull
                    docker-compose up -d
                    '''
                }
            }
        }
    }

    post {
        always {
            junit '**/target/surefire-reports/*.xml'
            cleanWs()
        }
    }
}
