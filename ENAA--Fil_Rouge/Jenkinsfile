pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-credentiels')
        SONAR_TOKEN = credentials('sonartoken')
        SONARQUBE_SERVER = 'SonarServer'
        IMAGE_NAME = 'docnet-app'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                dir('ENAA--Fil_Rouge') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                dir('ENAA--Fil_Rouge') {
                    bat 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('ENAA--Fil_Rouge') {
                    withSonarQubeEnv('SonarServer') {
                        bat "mvn sonar:sonar -Dsonar.token=${SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                dir('ENAA--Fil_Rouge') {
                    bat "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Tag and Push Docker Images') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", 'docker-hub-credentiels') {
                        bat """
                            docker tag ${IMAGE_NAME}:latest alaaelarbaoui/doc_net:tagname
                            docker push alaaelarbaoui/doc_net:tagname
                        """
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                dir('ENAA--Fil_Rouge') {
                    bat 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
